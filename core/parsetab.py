
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND COMMA DIVIDE ELSE EPS EQUALS FALSE FLOAT GAUSS GE GT ID IF INTEGER LCURLY LE LPAREN LT MINUS NE NEWLINE NOT NUMERIC OR PLUS POWER RANDOM RCURLY RETURN RPAREN SEMI STRING THEN TIMES TRUEprogram : program statement\n               | statementstatement : random_var_assignment SEMI\n                  | numeric_var_assignment SEMI\n                  | ifblock\n                  | ifelseblock\n    statement : statement NEWLINErandom_var_assignment : RANDOM variable EQUALS gaussfuncnumeric_var_assignment : NUMERIC variable EQUALS numbergaussfunc : GAUSS LPAREN EPS DIVIDE number COMMA variable RPAREN\n                | GAUSS LPAREN EPS DIVIDE number COMMA number RPAREN\n    ifblock : IF boolean THEN LCURLY NEWLINE program NEWLINE RCURLYifelseblock : IF boolean THEN LCURLY NEWLINE program  RCURLY  ELSE  LCURLY NEWLINE program  RCURLYvariable : IDnumber  : INTEGER\n               | FLOATnumber  : MINUS INTEGER\n               | MINUS FLOATboolean  : TRUE\n                  | FALSEboolean : variable GT variable\n                | variable GE variable\n                | variable LE variable\n                | variable LT variable\n    boolean : boolean AND boolean\n                | boolean OR boolean\n                | NOT boolean\n    '
    
_lr_action_items = {'RANDOM':([0,1,2,5,6,10,11,12,13,48,50,55,61,64,65,],[7,7,-2,-5,-6,-1,-7,-3,-4,7,7,-12,7,7,-13,]),'NUMERIC':([0,1,2,5,6,10,11,12,13,48,50,55,61,64,65,],[8,8,-2,-5,-6,-1,-7,-3,-4,8,8,-12,8,8,-13,]),'IF':([0,1,2,5,6,10,11,12,13,48,50,55,61,64,65,],[9,9,-2,-5,-6,-1,-7,-3,-4,9,9,-12,9,9,-13,]),'$end':([1,2,5,6,10,11,12,13,55,65,],[0,-2,-5,-6,-1,-7,-3,-4,-12,-13,]),'NEWLINE':([2,5,6,10,11,12,13,38,50,55,58,65,],[11,-5,-6,11,-7,-3,-4,48,52,-12,61,-13,]),'RCURLY':([2,5,6,10,11,12,13,50,52,55,64,65,],[-2,-5,-6,-1,-7,-3,-4,53,55,-12,65,-13,]),'SEMI':([3,4,32,34,35,36,46,47,62,63,],[12,13,-8,-9,-15,-16,-17,-18,-11,-10,]),'ID':([7,8,9,21,25,26,27,28,29,30,57,],[15,15,15,15,15,15,15,15,15,15,15,]),'TRUE':([9,21,25,26,],[18,18,18,18,]),'FALSE':([9,21,25,26,],[19,19,19,19,]),'NOT':([9,21,25,26,],[21,21,21,21,]),'EQUALS':([14,15,16,],[22,-14,23,]),'GT':([15,20,],[-14,27,]),'GE':([15,20,],[-14,28,]),'LE':([15,20,],[-14,29,]),'LT':([15,20,],[-14,30,]),'THEN':([15,17,18,19,31,39,40,41,42,43,44,],[-14,24,-19,-20,-27,-25,-26,-21,-22,-23,-24,]),'AND':([15,17,18,19,31,39,40,41,42,43,44,],[-14,25,-19,-20,25,25,25,-21,-22,-23,-24,]),'OR':([15,17,18,19,31,39,40,41,42,43,44,],[-14,26,-19,-20,26,26,26,-21,-22,-23,-24,]),'RPAREN':([15,35,36,46,47,59,60,],[-14,-15,-16,-17,-18,62,63,]),'GAUSS':([22,],[33,]),'INTEGER':([23,37,51,57,],[35,46,35,35,]),'FLOAT':([23,37,51,57,],[36,47,36,36,]),'MINUS':([23,51,57,],[37,37,37,]),'LCURLY':([24,56,],[38,58,]),'LPAREN':([33,],[45,]),'COMMA':([35,36,46,47,54,],[-15,-16,-17,-18,57,]),'EPS':([45,],[49,]),'DIVIDE':([49,],[51,]),'ELSE':([53,],[56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,48,61,],[1,50,64,]),'statement':([0,1,48,50,61,64,],[2,10,2,10,2,10,]),'random_var_assignment':([0,1,48,50,61,64,],[3,3,3,3,3,3,]),'numeric_var_assignment':([0,1,48,50,61,64,],[4,4,4,4,4,4,]),'ifblock':([0,1,48,50,61,64,],[5,5,5,5,5,5,]),'ifelseblock':([0,1,48,50,61,64,],[6,6,6,6,6,6,]),'variable':([7,8,9,21,25,26,27,28,29,30,57,],[14,16,20,20,20,20,41,42,43,44,60,]),'boolean':([9,21,25,26,],[17,31,39,40,]),'gaussfunc':([22,],[32,]),'number':([23,51,57,],[34,54,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','our_parser.py',20),
  ('program -> statement','program',1,'p_program','our_parser.py',21),
  ('statement -> random_var_assignment SEMI','statement',2,'p_statement','our_parser.py',36),
  ('statement -> numeric_var_assignment SEMI','statement',2,'p_statement','our_parser.py',37),
  ('statement -> ifblock','statement',1,'p_statement','our_parser.py',38),
  ('statement -> ifelseblock','statement',1,'p_statement','our_parser.py',39),
  ('statement -> statement NEWLINE','statement',2,'p_statement_newline','our_parser.py',46),
  ('random_var_assignment -> RANDOM variable EQUALS gaussfunc','random_var_assignment',4,'p_statement_random_variable','our_parser.py',52),
  ('numeric_var_assignment -> NUMERIC variable EQUALS number','numeric_var_assignment',4,'p_statement_numeric_variable','our_parser.py',58),
  ('gaussfunc -> GAUSS LPAREN EPS DIVIDE number COMMA variable RPAREN','gaussfunc',8,'p_gauss','our_parser.py',63),
  ('gaussfunc -> GAUSS LPAREN EPS DIVIDE number COMMA number RPAREN','gaussfunc',8,'p_gauss','our_parser.py',64),
  ('ifblock -> IF boolean THEN LCURLY NEWLINE program NEWLINE RCURLY','ifblock',8,'p_command_if','our_parser.py',70),
  ('ifelseblock -> IF boolean THEN LCURLY NEWLINE program RCURLY ELSE LCURLY NEWLINE program RCURLY','ifelseblock',12,'p_command_if_else','our_parser.py',75),
  ('variable -> ID','variable',1,'p_variable','our_parser.py',101),
  ('number -> INTEGER','number',1,'p_number','our_parser.py',135),
  ('number -> FLOAT','number',1,'p_number','our_parser.py',136),
  ('number -> MINUS INTEGER','number',2,'p_number_signed','our_parser.py',144),
  ('number -> MINUS FLOAT','number',2,'p_number_signed','our_parser.py',145),
  ('boolean -> TRUE','boolean',1,'p_boolean','our_parser.py',150),
  ('boolean -> FALSE','boolean',1,'p_boolean','our_parser.py',151),
  ('boolean -> variable GT variable','boolean',3,'p_boolean_comparison','our_parser.py',156),
  ('boolean -> variable GE variable','boolean',3,'p_boolean_comparison','our_parser.py',157),
  ('boolean -> variable LE variable','boolean',3,'p_boolean_comparison','our_parser.py',158),
  ('boolean -> variable LT variable','boolean',3,'p_boolean_comparison','our_parser.py',159),
  ('boolean -> boolean AND boolean','boolean',3,'p_boolean_expr','our_parser.py',165),
  ('boolean -> boolean OR boolean','boolean',3,'p_boolean_expr','our_parser.py',166),
  ('boolean -> NOT boolean','boolean',2,'p_boolean_expr','our_parser.py',167),
]
